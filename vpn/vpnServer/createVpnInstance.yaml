AWSTemplateFormatVersion: 2010-09-09
Description: Create VPN Server

Parameters:
  VPNUntrustIp:
    Type: String
    Description: VPN Server IP address on VPN Untrust Network

  VPNTrustIp:
    Type: String
    Description: VPN Server IP address on VPN Trust Network

  VPNInstanceType:
    Type: String

Resources:
  VPNEC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: VPNEC2Instance
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: VPNEC2Instance
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                Resource:
                  - "*"
      Tags:
        - Key: !ImportValue VPNTagKey
          Value: !ImportValue VPNTagValue
        - Key: Name
          Value: VPN-IAMRole-VPNEC2Instance

  VPNEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref VPNEC2InstanceRole

  GetAMIIdLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import traceback
          def handler(event, context):
            responseData = {}
            try:
              target = event["ResourceProperties"]["TagValue"]
              ec2 = boto3.client("ec2")
              if event["RequestType"] == "Delete":
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                return
              ec2Info = ec2.describe_images(Filters = [{"Name": "tag:Name", "Values": [target]}])
              responseData["Id"] = ec2Info["Images"][0]["ImageId"]
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "Id")
              return
            except:
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              return
      Runtime: python2.7
      Timeout: 90
      Handler: index.handler
      MemorySize: 128
      FunctionName: GetAMIId
      Role: !ImportValue VPNLambdaExecutionRoleArn
      Tags:
        - Key: !ImportValue VPNTagKey
          Value: !ImportValue VPNTagValue
        - Key: Name
          Value: VPN-Lambda-GetAMIId

  GetAMIId:
    Type: Custom::GetAMIID
    Properties:
      ServiceToken: !GetAtt GetAMIIdLambda.Arn
      TagValue: !ImportValue VPNTagValue

  VPNInstance:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !ImportValue VPNSpotFleetInstanceRoleArn
        TerminateInstancesWithExpiration: false
        InstanceInterruptionBehavior: stop
        TargetCapacity: 1
        LaunchSpecifications:
          - EbsOptimized: true
            IamInstanceProfile:
              Arn: !GetAtt VPNEC2InstanceProfile.Arn
            ImageId: !GetAtt GetAMIId.Id
            InstanceType: !Ref VPNInstanceType
            KeyName: !ImportValue VPNEC2KeyPairName
            Monitoring:
              Enabled: false
            NetworkInterfaces:
              - AssociatePublicIpAddress: true
                DeleteOnTermination: true
                Description: VPN untrust ENI
                DeviceIndex: 0
                PrivateIpAddresses:
                  - Primary: true
                    PrivateIpAddress: !Ref VPNUntrustIp
                Groups:
                  - !ImportValue VPNUntrustSecurityGroupId
                SubnetId: !ImportValue VPNUntrustSubnetId
            SpotPrice: 1
            TagSpecifications:
              - ResourceType: instance
                Tags:
                  - Key: !ImportValue VPNTagKey
                    Value: !ImportValue VPNTagValue
                  - Key: Name
                    Value: !ImportValue VPNTagValue
            UserData:
              Fn::Base64: !Sub |
                #!/bin/bash
                yum update -y
                touch /root/.vimrc
                echo 'colorscheme koehler
                syntax on
                set nocompatible
                set backspace=indent,eol,start
                filetype plugin indent on
                syntax enable
                set clipboard=unnamed,autoselect
                set number
                set listchars=tab:^\ ,trail:~
                set expandtab
                set tabstop=4
                set softtabstop=4
                set shiftwidth=4
                set autoindent
                set ruler
                nnoremap <Esc><Esc> :nohlsearch<CR><ESC>
                set ttimeoutlen=10
                set hlsearch
                set ignorecase
                set smartcase
                set wildmenu
                set directory=/etc/vim/swap
                set backup
                set backupdir=/etc/vim/backup
                set undofile
                set undodir=/etc/vim/undo
                set encoding=utf-8
                
                set statusline=%#LineNr#
                set statusline+=%F
                set statusline+=%#Cursor#
                set statusline+=\ %m
                set statusline+=%=
                set statusline+=%#CursorColumn#
                set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
                set statusline+=\[%{&fileformat}\]
                set statusline+=\ %p%%
                set statusline+=\ %l:%c
                set laststatus=2
                
                if has("autocmd")
                    filetype plugin on
                    filetype indent on
                
                    autocmd FileType c          setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType html       setlocal sw=2 sts=2 ts=2 et
                    autocmd FileType xml        setlocal sw=2 sts=2 ts=2 et
                    autocmd FileType ruby       setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType js         setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType zsh        setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType python     setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType scala      setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType json       setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType html       setlocal sw=2 sts=2 ts=2 et
                    autocmd FileType css        setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType scss       setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType sass       setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType javascript setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType yaml       setlocal sw=2 sts=2 ts=2 et
                endif' > /etc/vimrc
                rm -f /etc/profile.d/vim.sh
                mkdir -p /etc/vim/backup
                mkdir -p /etc/vim/swap
                mkdir -p /etc/vim/undo
                chmod 777 -R /etc/vim

  VPNTrustNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: VPN trust ENI
      GroupSet:
        - !ImportValue VPNTrustSecurityGroupId
      PrivateIpAddress: !Ref VPNTrustIp
      SourceDestCheck: false
      SubnetId: !ImportValue VPNTrustSubnetId
      Tags:
        - Key: !ImportValue VPNTagKey
          Value: !ImportValue VPNTagValue
        - Key: Name
          Value: VPN-NetworkInterface-Trust

Outputs:
  VPNTrustNetworkInterfaceId:
    Value: !Ref VPNTrustNetworkInterface
