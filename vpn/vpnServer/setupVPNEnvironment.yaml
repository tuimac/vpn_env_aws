AWSTemplateFormatVersion: 2010-09-09
Description: Add route to Private and Public RouteTables

Parameters:
  VPNTrustNetworkInterfaceId:
    Type: String

Resources:
  ChangeSourceDestCheckLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import time
          import traceback
          def handler(event, context):
            responseData = {}
            try:
              if event["RequestType"] == "Delete":
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                return
              # Specified instance with 'vpn' tag, get Netwowrk Interface ID and
              # change Source Dest Check
              target = event["ResourceProperties"]["TagValue"]
              ec2 = boto3.client("ec2")
              responseData["TagValue"] = target
              ec2Info = ec2.describe_instances(
                Filters = [
                  {
                    "Name": "tag:Name", 
                    "Values": [target]
                  },
                  {
                    "Name": "instance-state-code",
                    "Values": ["16"]
                  }
                ]
              )["Reservations"][0]["Instances"][0]
              ec2.modify_network_interface_attribute(
                NetworkInterfaceId = ec2Info["NetworkInterfaces"][0]["NetworkInterfaceId"],
                SourceDestCheck = {
                  "Value": False
                }
              )
              responseData["programlogicstatus"] = "SourceDestCheck modification is successed."
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              return
            except:
              responseData["programlogicstatus"] = traceback.format_exc()
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              return
      Runtime: python2.7
      Timeout: 90
      Handler: index.handler
      MemorySize: 128
      FunctionName: ChangeSourceDestCheck
      Role: !ImportValue VPNLambdaExecutionRoleArn
      Tags:
        - Key: !ImportValue VPNTagKey
          Value: !ImportValue VPNTagValue
        - Key: Name
          Value: VPN-Lambda-ChangeSourceDestCheck

  ChangeSourceDestCheck:
    Type: Custom::ChangeSourceDestCheck
    Properties:
      ServiceToken: !GetAtt ChangeSourceDestCheckLambda.Arn
      TagValue: !ImportValue VPNTagValue
  
  GetVPNInstanceIdLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import time
          import traceback
          def handler(event, context):
            responseData = {}
            try:
              if event["RequestType"] == "Delete":
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                return
              target = event["ResourceProperties"]["TagValue"]
              ec2 = boto3.client("ec2")
              ec2Info = ec2.describe_instances(
                Filters = [
                  {
                    "Name": "tag:Name", 
                    "Values": [target]
                  },
                  {
                    "Name": "instance-state-code",
                    "Values": ["16"]
                  }
                ]
              )["Reservations"][0]["Instances"][0]
              responseData["Id"] = ec2Info["InstanceId"]
              responseData["ProgramLogicStatus"] = "Success to get instance ID"
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              return
            except:
              responseData["ProgramLogicStatus"] = traceback.format_exc()
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              return
      Runtime: python2.7
      Timeout: 90
      Handler: index.handler
      MemorySize: 128
      FunctionName: GetVPNInstanceId
      Role: !ImportValue VPNLambdaExecutionRoleArn
      Tags:
        - Key: !ImportValue VPNTagKey
          Value: !ImportValue VPNTagValue
        - Key: Name
          Value: VPN-Lambda-GetVPNInstanceId

  GetVPNInstanceId:
    Type: Custom::GetVPNInstanceId
    Properties:
      ServiceToken: !GetAtt GetVPNInstanceIdLambda.Arn
      TagValue: !ImportValue VPNTagValue

  AttachNetworkInterfaceToVPNInstance:
    Type: AWS::EC2::NetworkInterfaceAttachment
    Properties:
      DeviceIndex: 1
      DeleteOnTermination: true
      InstanceId: !GetAtt GetVPNInstanceId.Id
      NetworkInterfaceId: !Ref VPNTrustNetworkInterfaceId

  AddVPNRouteToPrivateRouteTableA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !ImportValue VPNPrivateRouteTableAId
      NetworkInterfaceId: !Ref VPNTrustNetworkInterfaceId
      DestinationCidrBlock: !ImportValue VPNTunnelCidr

  AddVPNRouteToPrivateRouteTableC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !ImportValue VPNPrivateRouteTableCId
      NetworkInterfaceId: !Ref VPNTrustNetworkInterfaceId
      DestinationCidrBlock: !ImportValue VPNTunnelCidr

  AddVPNRouteToPrivateRouteTableD:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !ImportValue VPNPrivateRouteTableDId
      NetworkInterfaceId: !Ref VPNTrustNetworkInterfaceId
      DestinationCidrBlock: !ImportValue VPNTunnelCidr

  AddRouteToPublicRouteTableA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !ImportValue VPNPublicRouteTableAId
      NetworkInterfaceId: !Ref VPNTrustNetworkInterfaceId
      DestinationCidrBlock: !ImportValue VPNTunnelCidr

  AddRouteToPublicRouteTableC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !ImportValue VPNPublicRouteTableCId
      NetworkInterfaceId: !Ref VPNTrustNetworkInterfaceId
      DestinationCidrBlock: !ImportValue VPNTunnelCidr

  AddRouteToPublicRouteTableD:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !ImportValue VPNPublicRouteTableDId
      NetworkInterfaceId: !Ref VPNTrustNetworkInterfaceId
      DestinationCidrBlock: !ImportValue VPNTunnelCidr
