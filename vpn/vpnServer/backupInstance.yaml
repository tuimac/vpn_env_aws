AWSTemplateFormatVersion: 2010-09-09
Description: Take VPN Server's AMI for Backup when delete this stack

Resources:
  BackupVPNInstanceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import time
          from datetime import date
          import traceback
          def handler(event, context):
            responseData = {}
            try:
              target = event["ResourceProperties"]["TagValue"]
              ec2 = boto3.client("ec2")
              if event["RequestType"] == "Delete":
                tagtargets = []
                createDate = date.today().strftime("%Y%m%d")
                # Get information for EC2 Instance and AMI with target tag.
                instanceInfo = ec2.describe_instances(
                  Filters = [
                    {
                      "Name": "tag:Name",
                      "Values": [target]
                    },
                    {
                      "Name": "instance-state-code",
                      "Values": ["16"]
                    }
                  ]
                )["Reservations"][0]["Instances"][0]
                amiInfo = ec2.describe_images(
                  Filters = [
                    {
                      "Name": "tag:Name",
                      "Values": [target]
                    },
                    {
                      "Name": "name",
                      "Values": [target]
                    }
                  ]
                )["Images"][0]
                # If there is old AMI and Snapshots, delete these.
                # Get IDs(AMI and Snapshots) with target tag.
                amiId = amiInfo["ImageId"]
                snapshotIds = [ebs["Ebs"]["SnapshotId"] for ebs in amiInfo["BlockDeviceMappings"]]
                # Delete AMI and Snapshots with target AMI.
                ec2.deregister_image(ImageId=amiId)
                [ec2.delete_snapshot(SnapshotId=snapshotId) for snapshotId in snapshotIds]
                # For take AMI backup, shutdown target EC2 Instance.
                # If target EC2 Instance is spot fleet, you can't stop that instance.
                # So when you get exception, bypass that process.
                instanceId = instanceInfo["InstanceId"]
                try:
                  ec2.stop_instances(InstanceIds=[instanceId])
                  while "stopped" != ec2.describe_instances(InstanceIds=[instanceId])["Reservations"][0]["Instances"][0]["State"]["Name"]:
                    time.sleep(1)
                except: pass
                # Take AMI backup and wait until backup done.
                amiId = ec2.create_image(InstanceId=instanceId, NoReboot=False, Name=target)["ImageId"]
                while "available" != ec2.describe_images(ImageIds=[amiId])["Images"][0]["State"]:
                  time.sleep(1)
                # Put tags to each resources(AMI and Snapshot.)
                tagtargets.append(amiId)
                for ebs in ec2.describe_images(ImageIds=[amiId])["Images"][0]["BlockDeviceMappings"]:
                  tagtargets.append(ebs["Ebs"]["SnapshotId"])
                ec2.create_tags(
                  Resources = tagtargets,
                  Tags = [
                    {"Key": "Environment", "Value": target},
                    {"Key": "Name", "Value": target},
                    {"Key": "CreateDate", "Value": createDate}
                  ]
                )
                responseData["ProgramLogicStatus"] = "Taking AMI backup is successed."
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                return
              else:
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                return
            except:
              responseData["ProgramLogicStatus"] = traceback.format_exc()
              return
      Runtime: python2.7
      Timeout: 900
      Handler: index.handler
      MemorySize: 128
      Role: !ImportValue VPNLambdaExecutionRoleArn
      FunctionName: BackupVPNInstance
      Tags:
        - Key: !ImportValue VPNTagKey
          Value: !ImportValue VPNTagValue
        - Key: Name
          Value: VPN-Lambda-BackupVPNInstance

  BackupVPNInstance:
    Type: Custom::BackupVPNInstance
    Properties:
      ServiceToken: !GetAtt BackupVPNInstanceLambda.Arn
      TagValue: !ImportValue VPNTagValue
