AWSTemplateFormatVersion: "2010-09-09"
Description: Add route to Private and Public RouteTables

Parameters:
  TrustNetworkInterfaceId:
    Type: String
    Description: Trust ENI ID

  PublicRouteTableId:
    Type: String
    Description: Public Route Table ID

  PrivateRouteTableId:
    Type: String
    Description: Private Route Table ID

  VPNTunnelCidr:
    Type: String
    Description: Virutal Network's Cidr

  VPNLambdaExecRoleArn:
    Type: String
    Description: Role for custom resources aren based on Lambda

Resources:
  GetInstanceInfoLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import time
          import traceback
          # Change all network interfaces SourceDestCheck setting
          def changeSourceDestCheck(ec2, instanceId):
            try:
              for i in range(800):
                ec2Info = ec2.describe_instances(
                  InstanceIds=[instanceId]
                )["Reservations"][0]["Instances"][0]
                if ec2Info["State"]["Name"] == "running":
                  for eni in ec2Info["NetworkInterfaces"]:
                    ec2.modify_network_interface_attribute(
                      NetworkInterfaceId=eni["NetworkInterfaceId"],
                      SourceDestCheck={"Value": False}
                    )
                  break
                time.sleep(1)
              return
            except Exception as e:
              raise e
          def handler(event, context):
            responseData = {}
            try:
              if event["RequestType"] == "Delete":
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                return
              # Specified instance with 'vpn' tag, get Netwowrk Interface ID and
              # change Source Dest Check
              target = "vpn"
              ec2 = boto3.client("ec2")
              ec2Info = ec2.describe_instances(Filters=[{"Name": "tag:Name", "Values": [target]}])
              if len(ec2Info["Reservations"]) != 0:
                state = ""
                for instance in ec2Info["Reservations"]:
                  state = instance["Instances"][0]["State"]["Name"]
                  if state != "terminated":
                    changeSourceDestCheck(ec2, instance["Instances"][0]["InstanceId"])
                    responseData["InstanceId"] = instance["Instances"][0]["InstanceId"]
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                    return
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                return
              else:
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                return
            except:
              traceback.print_exc()
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              return
      Runtime: python2.7
      Timeout: 900
      Handler: index.handler
      MemorySize: 128
      FunctionName: GetInstanceInfo
      Role: !Ref VPNLambdaExecRoleArn
      Tags:
        - Key: Environment
          Value: vpn
        - Key: Name
          Value: GetInstanceInfo

  GetInstanceInfo:
    Type: Custom::GetInstanceInfo
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt GetInstanceInfoLambda.Arn

  AttachNetworkInterfaceToVPNServer:
    Type: AWS::EC2::NetworkInterfaceAttachment
    Properties:
      DeviceIndex: 1
      DeleteOnTermination: true
      InstanceId: !GetAtt GetInstanceInfo.InstanceId
      NetworkInterfaceId: !Ref TrustNetworkInterfaceId

  AddRouteToPrivateRouteTable:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableId
      NetworkInterfaceId: !Ref TrustNetworkInterfaceId
      DestinationCidrBlock: !Ref VPNTunnelCidr

  AddRouteToPublicRouteTable:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTableId
      NetworkInterfaceId: !Ref TrustNetworkInterfaceId
      DestinationCidrBlock: !Ref VPNTunnelCidr
