AWSTemplateFormatVersion: "2010-09-09"
Description: Create VPN Server

Parameters:
  PublicRouteTableId:
    Type: String
    Description: Public Route Table ID

  PrivateRouteTableId:
    Type: String
    Description: Private Route Table ID

  VPNTunnelCidr:
    Type: String
    Description: Virutal Network's Cidr

  VPNLambdaExecRoleArn:
    Type: String
    Description: Role for custom resources aren based on Lambda

Resources:
  GetInstanceIDLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import time
          def handler(event, context):
            responseData = {}
            try:
              if event["RequestType"] == "Delete":
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                return
              target = "vpn"
              ec2 = boto3.client("ec2")
              ec2Info = ec2.describe_instances(Filters=[{"Name": "tag:Name", "Values": [target]}])
              if len(ec2Info["Reservations"]) != 0:
                state = ""
                for instance in ec2Info["Reservations"]:
                  state = instance["Instances"][0]["State"]["Name"]
                  if state != "terminated":
                    responseData["Id"] = instance["Instances"][0]["InstanceId"]
                    ec2Info = instance
                    break
                for i in range(800):
                  ec2Info = ec2.describe_instances(
                    InstanceIds=[responseData["Id"]]
                  )["Reservations"][0]["Instances"][0]
                  if ec2Info["State"]["Name"] == "running":
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "Id")
                    ec2.modify_network_interface_attribute(
                      NetworkInterfaceId=ec2Info["NetworkInterfaces"][0]["NetworkInterfaceId"],
                      SourceDestCheck={"Value": False}
                    )
                    break
                  time.sleep(1)
              else:
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              return
            except Exception:
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              return
      Runtime: python2.7
      Timeout: 900
      Handler: index.handler
      MemorySize: 128
      Role: !Ref VPNLambdaExecRoleArn

  GetInstanceID:
    Type: Custom::GetInstanceID
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt GetInstanceIDLambda.Arn

  ADDRouteToPrivateRouteTable:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableId
      InstanceId: !GetAtt GetInstanceID.Id
      DestinationCidrBlock: !Ref VPNTunnelCidr

  ADDRouteToPublicRouteTable:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTableId
      InstanceId: !GetAtt GetInstanceID.Id
      DestinationCidrBlock: !Ref VPNTunnelCidr
