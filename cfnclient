#!/usr/bin/env python3

# Just import modules for this script.
import boto3
import traceback
import logging
import sys
import re
import time
import datetime
import json
from os import walk, path

################################################################
#################### How to Use this script ####################
#
# Change "CONFIG" dictionary variable contents like below
# example.
#
# (Example)
#
# CONFIG = {
#     "clustername(don't change)": "name of cluster of root stacks"
#     "bucketname(don't change)": "bucket name",
#     "bucketregion(don't change)": "bucket region"
#     "templates(don't change)": {
#         "first stackname": "template file name by relative path",
#         "second stackname": "template file name by relative path"
#     }
#     "uploadTarget(don't change)": "root directory of template files"
# }
#
# If you want to create multiple stacks at once execution,
# you add "stackname(key)" and "template file name(value)" to
# template's value.
#
#################################################################

CONFIG = {
    "clustername": "vpn",
    "bucketname": "00-cfn-repository",
    "bucketregion": "ap-northeast-1",
    "templates": {
        "vpn-network": "network/root.yaml",
    },
    "uploadTarget": "vpn",
}

######################################
# Don't need to modify below scripts.#
######################################

class CfnAutomation:
    def __init__(self):
        self.s3resource = boto3.resource("s3")
        self.s3client = boto3.client("s3")
        self.cfnclient = boto3.client("cloudformation")
        self.ssmclient = boto3.client("ssm")
        self.stackSequence = []
        logging.basicConfig(level=logging.INFO)

    def createStacks(self):
        try:
            print("#####################Preprocessing#####################")
            self.__uploadTemplates()
            print("#####################Create Stacks#####################")
            print("ClusterName: " + CONFIG["clustername"])
            self.__doCreateStacks()
        except Exception as e:
            raise e

    def createDeleteStackDocument(self):
        try:
            # If there is old document with same document name, delete it because renew it.
            response = self.ssmclient.list_documents(
                DocumentFilterList = [{"key": "Name", "value": CONFIG["clustername"]}]
            )["DocumentIdentifiers"]
            if len(response) > 0:
                self.ssmclient.delete_document(Name=CONFIG["clustername"])

            # Create SSM document to delete all stacks.
            document = dict()
            document["schemaVersion"] = "0.3"
            document["description"] = "Delete stacks in order."
            document["parameters"] = dict()
            mainSteps = []
            for i in range(len(self.stackSequence) - 1, -1, -1):
                step = dict()
                stepNamePrefix = "Delete"
                step["name"] = stepNamePrefix + re.sub("\W", "", self.stackSequence[i])
                step["action"] = "aws:deleteStack"
                step["inputs"] = dict()
                step["inputs"]["StackName"] = self.stackSequence[i]
                if i == 0:
                    mainSteps.append(step)
                    break
                else:
                    step["nextStep"] = stepNamePrefix + re.sub("\W", "", self.stackSequence[i - 1])
                    mainSteps.append(step)
            document["mainSteps"] = mainSteps
            self.ssmclient.create_document(
                Content = json.dumps(document, indent=4),
                Name = CONFIG["clustername"],
                DocumentType = "Automation",
                DocumentFormat = "JSON"
            )
        except Exception as e:
            raise e

    def deleteStacks(self):
        try:
            # Delete stacks by ssm automation.
            # Make sure that there is document to delete stacks or not.
            documentName = self.ssmclient.list_documents(
                DocumentFilterList = [
                    {"key": "Name", "value": CONFIG["clustername"]}
                ]
            )["DocumentIdentifiers"][0]["Name"]

            # Execute automation and get AutomationExecution ID.
            automationId = self.ssmclient.start_automation_execution(
                DocumentName=CONFIG["clustername"]
            )["AutomationExecutionId"]

            # Polling result of automation until automation status will be except "InProgress".
            logging.info("Start to delete " + CONFIG["clustername"] + " cluster...")
            while True:
                response = self.ssmclient.get_automation_execution(
                    AutomationExecutionId = automationId
                )
                status = response["AutomationExecution"]["AutomationExecutionStatus"]
                if status != "Pending" and status != "InProgress":
                    if status == "Success" or status == "Failed":
                        if status == "Success":
                            logging.info("Completed to delete " + CONFIG["clustername"] + " cluster.")
                            self.ssmclient.delete_document(Name=CONFIG["clustername"])
                        else:
                            logging.error("Failed to delete " + CONFIG["clustername"]  + " cluster.")
                        break
                    else:
                        print("----------------------------------------------------------------------")
                        print("AutomationExecutionId: " + automationId)
                        print("Status: " + status)
                        print("----------------------------------------------------------------------")
                        break
                time.sleep(1)
            return
        except IndexError:
            # Delete stacks one by one.
            logging.info("Start to delete " + CONFIG["clustername"] + " cluster...")
            for stackName, template in CONFIG["templates"].items():
                for stack in self.cfnclient.describe_stacks()["Stacks"]:
                    if stackName == stack["StackName"]:
                        self.cfnclient.delete_stack(StackName=stackName)
                        while True:
                            try: 
                                self.cfnclient.describe_stacks(StackName=stackName)
                                time.sleep(1)
                            except:
                                break
                    else:
                        logging.info("There is no stack to delete.")                            
                logging.info("Completed to delete " + CONFIG["clustername"] + " completed.")
            return
        except Exception as e:
            raise e

    # Called from "createStacks" function.
    def __uploadTemplates(self):
        try:
            # Confirm directory was passed by argument is exist or not.
            directory = path.expanduser(CONFIG["uploadTarget"])
            if path.exists(directory) is False: raise FileNotFoundError

            # Delete all files in the bucket.
            if self.s3client.list_objects_v2(Bucket=CONFIG["bucketname"])["KeyCount"] > 0:
                for content in self.s3client.list_objects_v2(Bucket=CONFIG["bucketname"])["Contents"]:
                    response = self.s3client.delete_object(
                        Bucket = CONFIG["bucketname"],
                        Key = content["Key"]
                    )
            print("Delete all objects in " + CONFIG["bucketname"] + " bucket has been success.")

            # Search all files under target directory and upload each files.
            for current, dirs, files in walk(directory):
                if len(dirs) == 0 or len(files) > 0:
                    for file in files:
                        if file == sys.argv[0]: continue
                        allpath = current + "/" + file
                        m = re.match(directory + "/", allpath)
                        key = allpath[:m.start()] + allpath[m.end():]
                        self.s3resource.meta.client.upload_file(allpath, CONFIG["bucketname"], key)
            print("Upload all template files to " + CONFIG["bucketname"] + " bucket has been success.")
        except Exception as e:
            raise e
        return
    
    # Called from "createStacks" function.
    def __doCreateStacks(self):
        def searchStatusReason(stackName):
            events = self.cfnclient.describe_stack_events(StackName=stackName)
            logicalResourceId = ""
            for event in events["StackEvents"]:
                if event["ResourceStatus"] == "CREATE_FAILED":
                    logicalResourceId = event["LogicalResourceId"]
                    logging.error(logicalResourceId + ": " + event["ResourceStatusReason"])
            return logicalResourceId
        try:
            # Delete stacks.
            self.deleteStacks()
            
            # Create stacks and check creating stacks status.
            for stackName, template in CONFIG["templates"].items():
                # Create stacks.
                templateUrl = "https://" + CONFIG["bucketname"] + ".s3." + CONFIG["bucketregion"] + ".amazonaws.com/" + template
                response = self.cfnclient.create_stack(
                    StackName = stackName,
                    TemplateURL = templateUrl,
                    Capabilities = ["CAPABILITY_NAMED_IAM"]
                )
                
                # Check to create stacks status.
                startTime = datetime.datetime.now()
                createdStacksSet = set()
                creatingStacksSet = set()
                while True:
                    try:
                        failedStacks = self.cfnclient.list_stacks(
                            StackStatusFilter = ["ROLLBACK_IN_PROGRESS", "DELETE_IN_PROGRESS"]
                        )["StackSummaries"]
                        createdStacks = self.cfnclient.list_stacks(
                            StackStatusFilter = ["CREATE_COMPLETE"]
                        )["StackSummaries"]
                        creatingStacks = self.cfnclient.list_stacks(
                            StackStatusFilter = ["CREATE_IN_PROGRESS"]
                        )["StackSummaries"]
                        if len(failedStacks) != 0:
                            endTime = str(datetime.datetime.now() - startTime)
                            logging.error(stackname + ": CREATE_FAILED")
                            logicalResourceId = searchStatusReason(stackName)
                            if logicalResourceId != stackName:
                                for stack in self.cfnclient.list_stacks(StackStatusFilter=["DELETE_IN_PROGRESS"])["StackSummaries"]:
                                    stackname = stack["StackName"]
                                    if logicalResourceId in stackname:
                                        searchStatusReason(stack["StackId"])
                                        logging.error(CONFIG["clustername"] + ": CREATE_FAILED: [TIME] "  + endTime)
                                        break
                                for stack in self.cfnclient.list_stacks(StackStatusFilter=["DELETE_COMPLETE"])["StackSummaries"]:
                                    stackname = stack["StackName"]
                                    if logicalResourceId in stackname:
                                        searchStatusReason(stack["StackId"])
                                        logging.error(CONFIG["clustername"] + ": CREATE_FAILED: [TIME] "  + endTime)
                                        break
                                break
                            else:
                                logging.error(CONFIG["clustername"] + ": CREATE_FAILED: [TIME] "  + endTime)
                                break
                        if len(creatingStacks) <= 0:
                            if "CREATE_COMPLETE" == self.cfnclient.describe_stacks(StackName=stackName)["Stacks"][0]["StackStatus"]:
                                endTime = str(datetime.datetime.now() - startTime)
                                logging.info(CONFIG["clustername"] + ": CREATE_COMPLETE: [TIME] "  + endTime)
                                break
                            else:
                                pass
                        for createdStack in createdStacks:
                            stackname = createdStack["StackName"]
                            if not stackname in createdStacksSet:
                                logging.info(stackname + ": CREATE_COMPLETE")
                                createdStacksSet.add(stackname)
                        for creatingStack in creatingStacks:
                            stackname = creatingStack["StackName"]
                            if not stackname in creatingStacksSet:
                                logging.info(stackname + ": CREATE_IN_PROGRESS")
                                creatingStacksSet.add(stackname)
                        time.sleep(1)
                    except Exception as e:
                        raise e
                self.stackSequence.append(stackName)
            return
        except Exception as e:
            raise e

if __name__ == "__main__":
    try:
        # Check arguments of this script.
        if len(sys.argv) != 2:
            logging.warning(" usage: cfnclient [create] | [delete]")
            exit(1)
        arg = sys.argv[1]

        # This one class corresponds to the cluster of creating stacks.
        cfnauto = CfnAutomation()

        # Do process depends on argument.
        if arg == "create":
            cfnauto.createStacks()
            cfnauto.createDeleteStackDocument()
        elif arg == "delete":
            cfnauto.deleteStacks()
        else:
            logging.error("usage: cfnclient [create] | [delete]")
            exit(1)
    except SystemExit:
        pass
    except:
        logging.error(traceback.format_exc().splitlines()[-1])
        exit(1)
