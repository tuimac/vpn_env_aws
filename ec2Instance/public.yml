AWSTemplateFormatVersion: "2010-09-09"
Description: Create EC2 instance on SesionManager Environment.

Parameters:
  PrivateIp:
    Description: 10.3.0.64/26
    Type: String
    Default: 10.3.0.68

  InstanceType:
    Type: String
    Default: t3.micro
    
  AMIID:
    Description: Amazon Linux 2
    Type: String
    Default: ami-052652af12b58691f
 
  NameTag:
    Description: This tag will be used for value of instance's name tag and AMI's name tag for backup.
    Type: String
    Default: kubernetes

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: InstanceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: EC2InstancePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:*"
                  - "s3:*"
                Resource:
                  - "*"

  InstanceRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  Instance:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !ImportValue SpotFleetRoleArn
        TerminateInstancesWithExpiration: false
        InstanceInterruptionBehavior: stop
        TargetCapacity: 1
        LaunchSpecifications:
          - EbsOptimized: true
            IamInstanceProfile:
              Arn: !Ref InstanceRoleProfile
            ImageId: !Ref AMIID
            InstanceType: !Ref InstanceType
            KeyName: !ImportValue EC2KeyPairName
            Monitoring:
              Enabled: false
            NetworkInterfaces:
              - AssociatePublicIpAddress: true
                DeleteOnTermination: true
                Description: Public Instance
                DeviceIndex: 0
                PrivateIpAddresses:
                  - Primary: true
                    PrivateIpAddress: !Ref PrivateIp
                Groups:
                  - !ImportValue PublicSecurityGroupId
                SubnetId: !ImportValue PublicSubnetId
            SpotPrice: 1
            TagSpecifications:
              - ResourceType: instance
                Tags:
                  - Key: Environment
                    Value: vpn
                  - Key: Name
                    Value: !Ref NameTag
            UserData:
              Fn::Base64: !Sub |
                #!/bin/bash
                yum update -y
                touch /root/.vimrc
                echo 'colorscheme koehler
                syntax on
                set nocompatible
                set backspace=indent,eol,start
                filetype plugin indent on
                syntax enable
                set clipboard=unnamed,autoselect
                set number
                set listchars=tab:^\ ,trail:~
                set expandtab
                set tabstop=4
                set softtabstop=4
                set shiftwidth=4
                set autoindent
                set ruler
                nnoremap <Esc><Esc> :nohlsearch<CR><ESC>
                set ttimeoutlen=10
                set hlsearch
                set ignorecase
                set smartcase
                set wildmenu
                set directory=/etc/vim/swap
                set backup
                set backupdir=/etc/vim/backup
                set undofile
                set undodir=/etc/vim/undo
                set encoding=utf-8

                set statusline=%#LineNr#
                set statusline+=%F
                set statusline+=%#Cursor#
                set statusline+=\ %m
                set statusline+=%=
                set statusline+=%#CursorColumn#
                set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
                set statusline+=\[%{&fileformat}\]
                set statusline+=\ %p%%
                set statusline+=\ %l:%c
                set laststatus=2

                if has("autocmd")
                    filetype plugin on
                    filetype indent on

                    autocmd FileType c          setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType html       setlocal sw=2 sts=2 ts=2 et
                    autocmd FileType xml        setlocal sw=2 sts=2 ts=2 et
                    autocmd FileType ruby       setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType js         setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType zsh        setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType python     setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType scala      setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType json       setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType html       setlocal sw=2 sts=2 ts=2 et
                    autocmd FileType css        setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType scss       setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType sass       setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType javascript setlocal sw=4 sts=4 ts=4 et
                    autocmd FileType yaml       setlocal sw=2 sts=2 ts=2 et
                endif' > /etc/vimrc
                rm -f /etc/profile.d/vim.sh
                mkdir -p /etc/vim/backup
                mkdir -p /etc/vim/swap
                mkdir -p /etc/vim/undo
                chmod 777 -R /etc/vim

  BackupLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import time
          from datetime import date
          import traceback
          def handler(event, context):
            responseData = {}
            try:
              target = "vpn"
              ec2 = boto3.client("ec2")
              if event["RequestType"] == "Delete":
                tagtargets = []
                createDate = date.today().strftime("%Y%m%d")
                # Get information for EC2 Instance and AMI with target tag.
                instanceInfo = ec2.describe_instances(
                  Filters=[{"Name": "tag:Name", "Values": [target]}]
                )["Reservations"]
                amiInfo = ec2.describe_images(Filters=[{"Name": "tag:Name", "Values": [target]}])["Images"]
                #If there is target EC2 Instance, do backup.
                if instanceInfo[0]["Instances"][0]["State"]["Name"] == "running":
                  # If there is old AMI and Snapshots, delete these.
                  if len(amiInfo) != 0:
                    # Get IDs(AMI and Snapshots) with target tag.
                    amiId = amiInfo[0]["ImageId"]
                    snapshotIds = [ebs["Ebs"]["SnapshotId"] for ebs in amiInfo[0]["BlockDeviceMappings"]]
                    # Delete AMI and Snapshots with target AMI.
                    ec2.deregister_image(ImageId=amiId)
                    [ec2.delete_snapshot(SnapshotId=snapshotId) for snapshotId in snapshotIds]
                    # For take AMI backup, shutdown target EC2 Instance.
                    # If target EC2 Instance is spot fleet, you can't stop that instance.
                    # So when you get exception, bypass that process.
                    instanceId = instanceInfo[0]["Instances"][0]["InstanceId"]
                  try:
                    ec2.stop_instances(InstanceIds=[instanceId])
                    while "stopped" != ec2.describe_instances(InstanceIds=[instanceId])["Reservations"][0]["Instances"][0]["State"]["Name"]:
                      time.sleep(1)
                  except: pass
                  # Take AMI backup and wait until backup done.
                  amiId = ec2.create_image(InstanceId=instanceId, NoReboot=False, Name=target)["ImageId"]
                  while "available" != ec2.describe_images(ImageIds=[amiId])["Images"][0]["State"]:
                    time.sleep(1)
                  # Put tags to each resources(AMI and Snapshot.)
                  tagtargets.append(amiId)
                  for ebs in ec2.describe_images(ImageIds=[amiId])["Images"][0]["BlockDeviceMappings"]:
                    tagtargets.append(ebs["Ebs"]["SnapshotId"])
                  ec2.create_tags(
                    Resources = tagtargets,
                    Tags = [
                      {"Key": "Environment", "Value": target},
                      {"Key": "Name", "Value": target},
                      {"Key": "CreateDate", "Value": createDate}
                    ]
                  )
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                  return
                else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                  return
              else:
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                return
            except:
              traceback.print_exc()
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              return
      Runtime: python2.7
      Timeout: 900
      Handler: index.handler
      MemorySize: 128
      Role: !ImportValue GetPublicIpAndBackupLambdaExecRoleArn
      FunctionName: Backup
      Tags:
        - Key: Environment
          Value: vpn
        - Key: Name
          Value: Backup

  Backup:
    Type: Custom::Backup
    Properties:
      ServiceToken: !GetAtt BackupLambda.Arn
