AWSTemplateFormatVersion: "2010-09-09"
Description: Create VPN Server

Parameters:
  VPNSubnetId:
    Type: String
    Description: Subnet ID for VPN Subnet

  VPNSecurityGroupId:
    Type: String
    Description: Security Group ID for VPN Server

  VPNServerIp:
    Type: String
    Description: VPN Server IP address

  PrivateRouteTableId:
    Type: String
    Description: Private Route Table ID

  VPNTunnelCidr:
    Type: String
    Description: Virutal Network's Cidr

Resources:
  VPNRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: VPN
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:*"
                Resource:
                  - "*"

  VPNRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref VPNRole

  VPNLambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: "VPNLambdaExecPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:*"
                  - "logs:*"
                Resource:
                  - "*"

  SpotFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - "spotfleet.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole

  GetAMIIDLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          def handler(event, context):
            responseData = {}
            try:
              target = "vpn"
              ec2 = boto3.client("ec2")
              if event["RequestType"] == "Delete":
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                return
              ec2Info = ec2.describe_images(Filters = [{"Name": "tag:Name", "Values": [target]}])
              responseData["Id"] = ec2Info["Images"][0]["ImageId"]
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "Id")
              return
            except Exception:
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              return
      Runtime: python2.7
      Timeout: 30
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt VPNLambdaExecRole.Arn

  GetAMIID:
    Type: Custom::GetAMIID
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt GetAMIIDLambda.Arn

  VPNServer:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !GetAtt SpotFleetRole.Arn
        LaunchSpecifications:


  VPNServer:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: ap-northeast-1a
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 8
      ImageId: !GetAtt GetAMIID.Id
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: t3.micro
      KeyName: tuimac
      Monitoring: false
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          PrivateIpAddress: !Ref VPNServerIp
          GroupSet:
            - !Ref VPNSecurityGroupId
          SubnetId: !Ref VPNSubnetId
      Tags:
        - Key: Name
          Value: vpn
        - Key: Billing
          Value: private
      IamInstanceProfile: !Ref VPNRoleProfile

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableId
      InstanceId: !Ref VPNServer
      DestinationCidrBlock: !Ref VPNTunnelCidr
