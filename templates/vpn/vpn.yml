AWSTemplateFormatVersion: "2010-09-09"
Description: Create VPN Server

Parameters:
  VPNSubnetId:
    Type: String
    Description: Subnet ID for VPN Subnet

  VPNSecurityGroupId:
    Type: String
    Description: Security Group ID for VPN Server

  VPNServerIp:
    Type: String
    Description: VPN Server IP address

Resources:
  VPNRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: VPN
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:*"
                Resource:
                  - "*"
  VPNRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref VPNRole
  VPNLambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
  VPNLambdaExecPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "VPNLambdaExecPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "ec2:*"
            Resource:
              - "*"
      Roles:
        - !Ref VPNLambdaExecRole
  GetAMIIDLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          def handler(event, context):
            target = "vpn"
            ec2 = boto3.client("ec2")
            if event["RequestType"] == "Delete":
              ec2.describe_images(Filters = [{"Name": "tag:Name", "Values": [target]}])
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            res = ec2.describe_images(Filters = [{"Name": "tag:Name", "Values": [target]}])
            returnData = {}
            returnData["Id"] = res["Images"][0]["ImageId"]
            cfnresponse.send(event, context, cfnresponse.SUCCESS, returnData, "Id")
      Runtime: python3.6
      Timeout: 30
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt
        - VPNLambdaExecRole
        - Arn
  GetAMIID:
    Type: Custom::GetAMIID
    Properties:
      ServiceToken: !GetAtt GetAMIIDLambda.Arn
      StackName:
        Ref: "vpn"
      Region: !Ref "AWS::Region"
  VPNServer:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: "ap-northeast-1a"
      BlockDeviceMappings:
      ImageId: !GetAtt GetAMIID.Id
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: t3.micro
      KeyName: tuimac
      Monitoring: false
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          PrivateIpAddress: !Ref VPNServerIp
          GroupSet: 
            - !Ref VPNSecurityGroupId
          SubnetId: !Ref SubnetId
      Tags:
        - Key: Name
          Value: vpn
        - Key: Billing
          Value: private
      IamInstanceProfile: !Ref VPNRoleProfile
