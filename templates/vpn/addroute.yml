AWSTemplateFormatVersion: "2010-09-09"
Description: Create VPN Server

Parameters:
  PrivateRouteTableId:
    Type: String
    Description: Private Route Table ID

  VPNTunnelCidr:
    Type: String
    Description: Virutal Network's Cidr

  VPNLambdaExecRoleArn:
    Type: String
    Description: Role for custom resources aren based on Lambda

Resources:
  GetInstanceIDLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          def handler(event, context):
            responseData = {}
            try:
              if event["RequestType"] == "Delete":
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                return
              target = "vpn"
              ec2 = boto3.client("ec2")
              ec2Info = ec2.describe_instances(Filters = [{"Name": "tag:Name", "Values": [target]}])
              if len(ec2Info["Reservations"]) != 0:
                responseData["Id"] = ec2Info["Reservations"][0]["Instances"][0]["InstanceId"]
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "Id")
              else:
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              return
            except Exception:
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
              return
      Runtime: python2.7
      Timeout: 30
      Handler: index.handler
      MemorySize: 128
      Role: !Ref VPNLambdaExecRoleArn

  GetInstanceID:
    Type: Custom::GetInstanceID
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt GetInstanceIDLambda.Arn

  ADDRouteToPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableId
      InstanceId: !GetAtt GetInstanceID.Id
      DestinationCidrBlock: !Ref VPNTunnelCidr
